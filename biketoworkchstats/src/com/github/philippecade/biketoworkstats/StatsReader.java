package com.github.philippecade.biketoworkstats;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

/**
 * Reader for the Excel file generated by biketowork.ch.
 * @author XPHC
 */
class StatsReader {

	private static final Logger LOGGER = LogManager.getLogManager().getLogger(StatsGenerator.class.getName());
	
	private static final int TEAM_NAME_COLUMN = 5;
	private static final int TEAM_KM = 52;
	private static final int TEAM_PERCENT_BY_BIKE = 49;
	private static final int MEMBER_1_EMAIL = 18;
	private static final int MEMBER_1_TOTAL_KM = 33;
	private static final int MEMBER_1_PERCENT_BY_BIKE = 36;
	private static final int MEMBER_1_KM_PER_DAY = 19;
	private static final int MEMBER_2_EMAIL = 22;
	private static final int MEMBER_2_TOTAL_KM = 37;
	private static final int MEMBER_2_PERCENT_BY_BIKE = 40;
	private static final int MEMBER_2_KM_PER_DAY = 23;
	private static final int MEMBER_3_EMAIL = 26;
	private static final int MEMBER_3_TOTAL_KM = 41;
	private static final int MEMBER_3_PERCENT_BY_BIKE = 44;
	private static final int MEMBER_3_KM_PER_DAY = 27;
	private static final int MEMBER_4_EMAIL = 30;
	private static final int MEMBER_4_TOTAL_KM = 45;
	private static final int MEMBER_4_PERCENT_BY_BIKE = 48;
	private static final int MEMBER_4_KM_PER_DAY = 31;
	private static final int TIMESTAMP = 53;
	
	/**
	 * Reads the status file and returns the data model
	 * @param file
	 * @return
	 * @throws IOException
	 */
	List<Team> readStatusFile(File file) throws IOException {
		List<Team> teams = new ArrayList<>();
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"))) {
			// skip the first header line
			String line = reader.readLine();
			while ((line = reader.readLine()) != null) {
				String[] columns = split(line);
				if (columns.length < TIMESTAMP) {
					continue;
				}
				
				Team team = new Team(columns[TEAM_NAME_COLUMN]);
				team.setKm(Double.parseDouble(columns[TEAM_KM]));
				team.setByBike(Double.parseDouble(columns[TEAM_PERCENT_BY_BIKE]));

				addNonEmptyMember(team, getMember(columns, MEMBER_1_EMAIL, MEMBER_1_TOTAL_KM, MEMBER_1_PERCENT_BY_BIKE, MEMBER_1_KM_PER_DAY));
				addNonEmptyMember(team, getMember(columns, MEMBER_2_EMAIL, MEMBER_2_TOTAL_KM, MEMBER_2_PERCENT_BY_BIKE, MEMBER_2_KM_PER_DAY));
				addNonEmptyMember(team, getMember(columns, MEMBER_3_EMAIL, MEMBER_3_TOTAL_KM, MEMBER_3_PERCENT_BY_BIKE, MEMBER_3_KM_PER_DAY));
				addNonEmptyMember(team, getMember(columns, MEMBER_4_EMAIL, MEMBER_4_TOTAL_KM, MEMBER_4_PERCENT_BY_BIKE, MEMBER_4_KM_PER_DAY));
				
				teams.add(team);
			}
		}
		return teams;
	}
	
	/**
	 * Reads several status files and returns a historized model
	 * @param files
	 * @return
	 * @throws IOException
	 */
	List<HistorizedTeam> readStatusFiles(File...files) throws IOException {
		List<HistorizedTeam> teams = new ArrayList<>();
		for (File file: files) {
			try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"))) {
				// skip the first header line
				String line = reader.readLine();
				while ((line = reader.readLine()) != null) {
					String[] columns = split(line);
					if (columns.length < TIMESTAMP) {
						continue;
					}
					Date timestamp = parseTimestamp(columns[TIMESTAMP]);
					HistorizedTeam team = getTeam(teams, columns[TEAM_NAME_COLUMN]);
					team.addKmAndBikeDays(timestamp, Double.parseDouble(columns[TEAM_KM]), Double.parseDouble(columns[TEAM_PERCENT_BY_BIKE]));
					
					addHistorizedMember(team, timestamp, columns, MEMBER_1_EMAIL, MEMBER_1_TOTAL_KM, MEMBER_1_PERCENT_BY_BIKE);
					addHistorizedMember(team, timestamp, columns, MEMBER_2_EMAIL, MEMBER_2_TOTAL_KM, MEMBER_2_PERCENT_BY_BIKE);
					addHistorizedMember(team, timestamp, columns, MEMBER_3_EMAIL, MEMBER_3_TOTAL_KM, MEMBER_3_PERCENT_BY_BIKE);
					addHistorizedMember(team, timestamp, columns, MEMBER_4_EMAIL, MEMBER_4_TOTAL_KM, MEMBER_4_PERCENT_BY_BIKE);
				}
			}
		}
		return teams;
	}

	private void addHistorizedMember(HistorizedTeam team, Date timestamp, String[] columns, int emailIndex, int totalKmIndex, int daysPerBike) {
		if (columns[emailIndex].isEmpty()) {
			// teams with less than 4 members
			return;
		}
		HistorizedMember member = getMember(team, columns, emailIndex);
		String km = columns[totalKmIndex];
		String byBike = columns[daysPerBike];
		member.addKmAndBikeDays(timestamp, km.isEmpty() ? 0 : Double.parseDouble(km), byBike.isEmpty() ? 0 : Double.parseDouble(byBike));
	}
	
	/**
	 * Returns the team matching the given name in the list or create a new one
	 * @param teams
	 * @param teamName
	 * @return
	 */
	private HistorizedTeam getTeam(List<HistorizedTeam> teams, String teamName) {
		Optional<HistorizedTeam> optional = teams.stream().filter(t->teamName.equals(t.getName())).findFirst();
		if (optional.isPresent()) {
			return optional.get();
		}
		HistorizedTeam team = new HistorizedTeam(teamName);
		teams.add(team);
		return team;
	}
	
	private HistorizedMember getMember(HistorizedTeam team, String[] columns, int memberEmailIndex) {
		Optional<HistorizedMember> optional = team.getMember(columns[memberEmailIndex]);
		if (optional.isPresent()) {
			return optional.get();
		}

		HistorizedMember historizedMember = new HistorizedMember(
				columns[memberEmailIndex - 2] + " " + columns[memberEmailIndex - 1], columns[memberEmailIndex]);
		team.addMember(historizedMember);
		return historizedMember;
	}

	/**
	 * Returns a member
	 * @param columns
	 * @param emailIndex
	 * @param totalKmIndex
	 * @param daysPerBike
	 * @return
	 */
	Member getMember(String[] columns, int emailIndex, int totalKmIndex, int daysPerBike, int kmPerDay) {
		Member member = new Member();
		member.setEmail(columns[emailIndex]);
		member.setName(columns[emailIndex-2]+" "+columns[emailIndex-1]);
		String km = columns[totalKmIndex];
		if (!km.isEmpty()) {
			member.setKm(Double.parseDouble(km));
		}
		String byBike = columns[daysPerBike];
		if (!byBike.isEmpty()) {
			member.setByBike(Double.parseDouble(byBike));
		}
		
		String kmPerDayValue = columns[kmPerDay];
		if (!kmPerDayValue.isEmpty()) {
			member.setKmPerDay(Double.parseDouble(kmPerDayValue));
		}
		return member;
	}
	

	private String[] split(String line) {
		return Arrays.stream(line.split(";")).map(this::stripQuotes).toArray(String[]::new);
	}
	
	private Date parseTimestamp(String timestamp) {
		try {
			// Example: Fri May 18 2018 09:28:53 GMT+0200 (W. Europe Daylight Time)
			SimpleDateFormat dateFormat = new SimpleDateFormat("EEE MMM d yyyy HH:mm:ss");
			// Note: skips time time zone
			return dateFormat.parse(timestamp);
		} catch (ParseException e) {
			LOGGER.log(Level.SEVERE, e.getMessage(), e);
			return new Date();
		}
	}

	private String stripQuotes(String s) {
		String result = s;
		if (result.startsWith("\"")) {
			result = result.substring(1);
		}
		if (result.endsWith("\"")) {
			result = result.substring(0, result.length()-1);
		}
		return result;
	}
	
	private void addNonEmptyMember(Team team, Member member) {
		if (!member.getEmail().isEmpty()) {
			team.addMember(member);
		}
	}
	

}
